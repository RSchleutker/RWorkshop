% Document settings, side mirror -----------------------------------------------

\documentclass[a4paper,					% Paper format
DIV=12,
11pt,									% Font size
% BCOR=8mm,								% Extra indent for binding correction
headsepline,							% Line below header
listof=totocnumbered,					% Numbering the Table of Content title
onecolumn,								% Document with two columns
%abstract=true,							% Showing Abstract title above the abstract
captions=tableheading,
titlepage=firstiscover,
onesided,
numbers=noenddot]{scrartcl}				% Do not reserve whole page for the cover

% \unsettoc{toc}{onecolumn}				% Print table of contents in two columns

\usepackage{setspace}					% Packages, which allows to set line spacing
\onehalfspacing							% Lines are spaced 1.5-fold
\setlength{\columnsep}{0.5cm}			% Space between columns in twocolumned document
\setlength{\parindent}{0pt}

\usepackage{cuted}						% Onecolumn contentnin twocolumned document


% Header and footer settings of the document -----------------------------------

\usepackage[automark]{scrlayer-scrpage}

\clearscrheadfoot						% Clear header and footer to provide space for customized content

\rehead[]{Data Science with R}
\rohead[]{Solutions 1}
\cehead[]{\today}
\cohead[]{\today}
\lehead[]{Solutions 1}
\lohead[]{Data Science with R}

\lefoot[]{\oldstylenums{\pagemark}}
\refoot[]{\textsc{{\small Raphael Schleutker}}}
\rofoot[]{\oldstylenums{\pagemark}}
\lofoot[]{\textsc{{\small Raphael Schleutker}}}


% Formation of the title page entries --------------------------------------------

\setkomafont{titlehead}{\centering}	% Show title head in small emphazised letters, centered

%\setkomafont{paragraph}{\normalfont\large\itshape}


\usepackage{tikz}
\usepackage{pgffor}
\usetikzlibrary{intersections,
decorations.pathmorphing,
shadows}

\tikzset{every picture/.style={/utils/exec={\sffamily}, text=black!80},
font={\fontsize{10pt}{12}\selectfont},
coord/.style={line width=.4mm, draw=black!80},
line/.style={line width=.2mm, draw=black!70}}

\usepackage{wrapfig}

\usepackage{seqsplit}


% Extra packages for language / characters, language settings --------------------

\usepackage[utf8]{inputenc}				% Unicode transformation format f√ºr Input
\usepackage[T1]{fontenc}				% Zeichensatzkodierung
\usepackage{lmodern}
\usepackage{upgreek}					% Providing non-emphasized greek letters
\usepackage{textcomp}					% Providing special characters 
\usepackage[english]{babel}				% Setting 'english' as the documents language
\usepackage{csquotes}


% Extra packages for math, special math characters etc., chemistry formulas -----------------

\usepackage{mathtools}
\usepackage{amssymb}					% Provides mathematical symbols
\usepackage{amstext}					% Provides \text{...} command in math environments
\usepackage{wasysym}					% Provides additional symbols like female, male, ...
\usepackage{amsthm}
\usepackage{thmtools}
%\usepackage{txfonts}
\usepackage{thm-restate}

%\newcommand{\bmmax}{2}
\usepackage{bm}

\newcommand{\matr}[1]{\bm{#1}}
\DeclareMathOperator*{\sums}{\sum\dots\sum}

\declaretheoremstyle[
bodyfont=\normalfont,
notefont=\normalfont\itshape,
spaceabove=12pt,
spacebelow=12pt,
postheadspace=9pt
]{mystyle}

\declaretheorem[name=Definition, numberwithin=section, style=mystyle]{definition}
\declaretheorem[name=Satz, sibling=definition, style=mystyle]{theorem}
\declaretheorem[name=Beispiel, sibling=definition, style=mystyle]{example}
\declaretheorem[name=Korollar, sibling=definition, style=mystyle]{corollar}
\declaretheorem[name=Folgerung, sibling=definition, style=mystyle]{implication}
\declaretheorem[name=Bemerkung, sibling=definition, style=mystyle]{remark}
\declaretheorem[name=Lemma, sibling=definition, style=mystyle]{lemma}
\declaretheorem[name=Behauptung, sibling=definition, style=mystyle]{claim}

\declaretheorem[
  style=mystyle,
  name=Beispiel \protect\continuation,
  unnumbered,
]{excont}

\newcommand{\continuation}{}
\newenvironment{continueexample}[2]
 {\renewcommand{\continuation}{#1}\excont[#2]}
 {\endexcont}
%\declaretheorem[name=Beweis, numbered=no]{proof}
%\declaretheorem[name=Beispiel, shaded={rulecolor=gray, rulewidth=1pt, bgcolor=white}]{example}

\newcommand{\mse}{\mathrm{MSE}}
\newcommand{\Var}{\mathrm{Var}}
\newcommand{\Kov}{\mathrm{Kov}}
\newcommand{\E}{\mathrm{E}}
\newcommand{\Exp}{\mathrm{Exp}}
\newcommand{\Erl}{\mathrm{Erl}}


% Defining units for use in text ------------------------------------------------------------

\usepackage{siunitx}					% Package, which provides pssibility to easy use units in text

\sisetup{
output-decimal-marker = {,},			% Decimal parker is '.'
separate-uncertainty = true,
per-mode = symbol,						% 'per' is shown as a symbol (fraction like)
list-final-separator = { und },			% Lists end with an ', and'
list-pair-separator = { und },			% Lists with two entries use 'and' for separation
range-phrase = { bis },					% Numbers in ranges are separated with 'to'
exponent-product = \cdot				% Use dot as multiplication sign
}


% Extra packages for showing / including graphics -------------------------------------------

\usepackage{graphicx}					% Package, which allows to include graphics


% Extra packages for additonal functionalities (list of abbreviations, ...) ------------------

\usepackage[printonlyused]{acronym}		% Abbreviations
\usepackage[super]{nth}


% Extra packages for table formatting --------------------------------------------------------

\usepackage{booktabs}					% Providing better formatted lines for tables
%\usepackage{array}						% 
\usepackage{longtable}					% Allows to create multisided tables
\usepackage{threeparttable}				% Special environment which provides table footnotes
\usepackage{tabularx}					% Specify width of the tables independently of the content
\usepackage{multirow}

\usepackage{etoolbox}
\AtBeginEnvironment{tabular}{\small}
\AtBeginEnvironment{tabularx}{\small}
\AtBeginEnvironment{tablenotes}{\footnotesize}



% Extra packages for lists --------------------------------------------------------------------

\usepackage{enumitem}					% Provides additonal bullets for lists
\setitemize{itemsep=-3pt}
\setenumerate{itemsep=-3pt}


% Everything for references, citations, etc... ------------------------------------------------

\usepackage[backend=biber,				% Use biber to compile the references
natbib=true,							% Use natbib for scientific style
citestyle=numeric-comp,					% Citation style in text
bibstyle=numeric,						% Citation style in references
uniquename=init,						% 
sorting=none,							% Citations in the bibliography are sorted for appearance, not alphabetically
maxcitenames=2,
maxbibnames=5,
giveninits=true]{biblatex}				% Show just initiales of first name

\addbibresource{literature/literature.bib}	% Define path to the literature resource file

\renewcommand{\bibfont}{\small}			% Reference font size

\DeclareNameAlias{sortname}{last-first}							% Show last name first
\DeclareNameAlias{default}{last-first}							% Show last name first
\DeclareFieldFormat[article]{volume}{\mkbibbold{#1}}			% Show 'volume' in bold font
\renewcommand*{\mkbibnamefamily}[1]{\textsc{#1}}				% Show last name in small caps
\renewcommand*{\labelnamepunct}{\mkbibbold{\addcolon\space}}	% Show colon after authors and year instead of a dot

\usepackage{xpatch}
\xpretobibmacro{bbx:editor}{\mkbibbold\bgroup}{}{}
\xapptobibmacro{bbx:editor}{\egroup}{}{}

\DefineBibliographyStrings{english}{	% Define language for the bibliography
andothers={\emph{et\ al\adddot}},		% Write "et al." instead of "and others"
%pages={},								% Do not show 'pages' but just the site numbers
in={}									% Do not show 'in' but only the journal name
}

\AtEveryBibitem{\clearfield{month}}		% Remove field 'month' from entries
\AtEveryBibitem{\clearfield{issn}}		% Remove field 'issn' from entries
%\AtEveryBibitem{\clearfield{number}}	% Remove field 'number' from entries (often misused for issue)
\AtEveryBibitem{\clearfield{doi}}		% Remove field 'doi' from entries (link to paper is shown instead)

\AtEveryBibitem{						% If enrty type is 'article' or 'Article', remove the field 'urldate'
  \ifentrytype{article}{
  }{
    \clearfield{urldate}
    \clearfield{eprint}
  }
  \ifentrytype{Article}{
  }{
    \clearfield{urldate}
    \clearfield{eprint}
  }
  \ifkeyword{Review}{\tikz\filldraw[color=gray] (0,0) circle (2.5pt);}{}
  \ifkeyword{Tool}{\tikz\filldraw[color=gray] (0,0) -- (6pt,0) -- (3pt,6pt);}{}
}


% Defining extra colours for use --------------------------------------------------------------

\usepackage{xcolor}						% Package, which allows to define new colours

\definecolor{textgray}{RGB}{101 101 101}
\definecolor{darkwhite}{RGB}{252 252 252}
\definecolor{darkgray}{RGB}{68 68 68}

% Formatting captions ------------------------------------------------------------------------

\usepackage{caption}									% Show single line caption like multiline caption
\captionsetup{
format=plain,
belowskip=6pt,
aboveskip=6pt}

\renewcaptionname{english}{\figureautorefname}{\textsc{Figure}}	% 'Figure' is written in small caps when using autoref
\renewcaptionname{english}{\tableautorefname}{\textsc{Table}}	% 'Table' is written in small caps when using autoref
\addtokomafont{captionlabel}{\scshape}							% Writing 'Figure' and 'Table' in small caps
\addtokomafont{captionlabel}{\small}							% Size of the caption label
\addtokomafont{caption}{\small}									% Size of the caption

\usepackage{subcaption}
\captionsetup[subfigure]{labelfont=sc}
\captionsetup[sub]{
position=top,
font=footnotesize,
labelfont={sc},
labelformat=parens,
skip=3pt,
singlelinecheck=false
}

\renewcommand\thesubfigure{\textsc{\alph{subfigure}}}	% Referenced subfigures are shown in small caps in the text
\renewcommand\thesubtable{\textsc{\alph{subtable}}}		% Referenced subtables are shown in small caps in the text


% Hyperref -----------------------------------------------------------------------------------

\usepackage[colorlinks,
linkcolor = textgray,
citecolor = textgray,
filecolor = textgray,
urlcolor = textgray,
bookmarks=true,
bookmarksnumbered=true,
]{hyperref}

%\hypersetup{draft}

\hypersetup{pdftitle={Statistik II},
pdfauthor={Raphael Schleutker}}

\usepackage{bookmark}

\usepackage{blindtext}

% ---------------------------------------------------------------------
% ---------------------------------------------------------------------

\begin{document}

%!Rnw weave = knitr
%\SweaveOpts{concordance=TRUE}

<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
options(formatR.arrow = TRUE, width = 50, scipen=999)
opts_chunk$set(echo = TRUE,
               message = FALSE,
               warning = FALSE,
               fig.path = 'figures/graphics-',
               cache.path = 'cache/graphics-',
               fig.align = 'center',
               dev = 'pdf',
               fig.show = 'hold',
               par = FALSE,
               cache = FALSE,
               size = 'small',
               comment = '#')

opts_knit$set(self.contained=FALSE)

knit_hooks$set(par = function(before, options, envir) {
  if (before && options$fig.show!='none') {
    par(mar = c(4,4,.1,.1),
        cex.lab = .95,
        cex.axis = .9,
        mgp = c(2,.7,0),
        tcl = -.3)
  }
}, crop=hook_pdfcrop)

Sys.setenv(LANG = "en")
@

<<figure_settings, echo=FALSE>>=
library(ggplot2)

theme_set(theme_bw(base_size = 8))
@

\section*{Exercise 1}

Formally, nothing is wrong with the function call. It is valid R code. However, as described in the presentation using absolute file names causes many problems as soon as you want to move your project to another computer or even to another place on the same computer. Moreover, the project folder is called \texttt{patency index}. It contains a space. This is not optimal, even though it would work in this example. A better way to write the code (assuming that the project folder has been renamed accordingly) is:

<<example1, eval=FALSE>>=
list.files("./data/")
@

Here, the period \texttt{.} refers to the current working directoy, which should always be the root folder of your project.


\section*{Exercise 2}

An interpreted language is a language that is executed by an interpreter. The interpreter is a program that reads and analyzes the source code and then executes the commands bit by bit. A compiled language in contrast is first translated by a compiler into machine code (resulting in e.g. an \texttt{.exe} file on windows) which can be directly executed by the CPU. This comes with some pros and cons for both system:

\begin{itemize}
	\item Interpreters usually exist for all computer systems. This means that you could share your script with someone working on a completely different system, i.e. interpreted languages are usually more portable. Compiled languages are less portable. Even though compilers exist for almost all systems as well you usually have to make many changes to your code in order to make it executable on a different system.
	\item Compilers produce stand-alone files (e.g. \texttt{.exe} on Windows), which can then be shared with other people. These people do not need the compiler or anything else. They could just execute the file (given they are using the same computer system). If you share the script of an interpreted language like R or Python the other person would have to install the interpreter in order to be able to execute the script.
	\item Since compilers produce machine code that is directly executed by the CPU the resulting program is considerably faster than interpreted languages, which always have the interpreter as an intermediate. C or Fortran, which are considered as the fastes languages, are magnitudes faster than R or Python.
	\item Developing a program in a compiled language is usually a pain in the ass. The code is less readable by humans and usually much longer for doing the same thing. Also, compilers do not forgive any formal mistakes in your code. Also, after each change you would have to re-compile your code, which takes time, before you could see any results. Interpreter usually only throw errors when a mistake becomes relevant. Additionally, you can simply write something on the command line, send it to the interpreter, and directly see the result---unimaginable for compiled languages. Therefore, it is easier for beginners to learn programming by using an interpreted language.
	\item Compilers produce machine code, which is unreadable for humans. Thus, if you have an outstanding idea for a program and you do not want others to see how your program is operating, you can write it in a compiled language.
	\item A more philosophical problem is that interpreter are not self-sustaining. Somewhere at the bottom you need machine code and that was produced by a compiler. For instance, the standard interpreter of R is written in C.
\end{itemize}

\end{document}