\documentclass[10pt]{beamer}

\usetheme[progressbar=frametitle]{metropolis}
\usepackage{appendixnumberbeamer}

\usepackage{booktabs}
\usepackage[scale=2]{ccicons}

\usepackage{xspace}
\newcommand{\themename}{\textbf{\textsc{metropolis}}\xspace}

\usepackage[utf8]{inputenc}				% Unicode transformation format f√ºr Input
\usepackage[T1]{fontenc}				% Zeichensatzkodierung
\usepackage{lmodern}
\usepackage{upgreek}					% Providing non-emphasized greek letters
\usepackage{textcomp}					% Providing special characters 
%\usepackage[english]{babel}				% Setting 'english' as the documents language
\usepackage{csquotes}

\usepackage{ulem}

\usepackage{fontspec}
\usepackage{fontawesome}

\metroset{block=fill}

\usepackage{dirtree}

\title{Data Science with R}
\subtitle{Part III: Functions and How to Get Help}
% \date{\today}
\date{February 28, 2020}
\author{Raphael Schleutker}
\institute{\textit{There are only two industries that refer to their customers as users.}
\hfill --- Edward Tufte}
% \titlegraphic{\hfill\includegraphics[height=1.5cm]{logo.pdf}}

\usepackage{hyperref}

\begin{document}

%!Rnw weave = knitr
%\SweaveOpts{concordance=TRUE}

<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
options(formatR.arrow = TRUE, width = 50, scipen=999)
opts_chunk$set(echo = TRUE,
               message = FALSE,
               warning = FALSE,
               fig.path = 'figures/graphics-',
               cache.path = 'cache/graphics-',
               fig.align = 'center',
               dev = 'pdf',
               fig.show = 'hold',
               par = FALSE,
               cache = FALSE,
               size = 'small',
               comment = '#')

opts_knit$set(self.contained=FALSE)

knit_hooks$set(par = function(before, options, envir) {
  if (before && options$fig.show!='none') {
    par(mar = c(4,4,.1,.1),
        cex.lab = .95,
        cex.axis = .9,
        mgp = c(2,.7,0),
        tcl = -.3)
  }
}, crop=hook_pdfcrop)

Sys.setenv(LANG = "en")
@

<<figure_settings, echo=FALSE>>=

@



% *****************************************************************************
% TITLEPAGE
% *****************************************************************************

\maketitle

\begin{frame}{Table of contents}
  \setbeamertemplate{section in toc}[sections numbered]
  \tableofcontents[hideallsubsections]
\end{frame}



% *****************************************************************************
% Function Basics
% *****************************************************************************

\section{Function Basics}
% *****************************************************************************

\begin{frame}[fragile]{Function Basics}

	To understand computations in R, two slogans are helpful:

    \begin{itemize}
    	\item Everything that exists is an object.
    	\item Everything that happens is a function call.
    \end{itemize}
    
    \hfill --- John Chambers


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Function Basics}

	This has two very important consequences:
	
	\begin{itemize}
		\item Whenever something happens in R, may it be the computation of a value, an assignment, deletion of a variable, plotting graphics, etc., there is a function called. No exception.
		\item Objects and functions are not mutually exclusive. Indeed, functions are objects as well (as they exist) and can be passed around like any other object. We will see in later presentations why this is useful.
	\end{itemize}

	Given the central role of functions, it's worth studying them in some detail.

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Function Basics}

	The essentials parts of a function are
	
	\begin{itemize}
		\item The name, by which the function is called.
		\item The argument list that is passed to the function.
		\item The function body, which is a series of expressions 'that do something'.
		\item The return value of the function. Every function has one (and only one) even though it doesn't seem so sometimes.
	\end{itemize}
	
	For now, we only focus on how to use functions, i.e. we can ignore the function body until later.

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Function Basics}

	<<function_1, size="large">>=
	mean(x = c(1, 2, 3, 4, 5))
	@
	
	\begin{itemize}
		\item \texttt{mean} is the function name.
		\item \texttt{x} is \emph{one} argument of the function.
		\item \texttt{3} is the return value.
	\end{itemize}
	
	Note that the function is called (executed) by tailoring the function name with parantheses.

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Function Basics -- Functions as Objects}

	<<function_2>>=
	mean()
	mean
	@
	
	\begin{itemize}
		\item In the first case, the function is called, which produces an error because there is no parameter to calculate the mean from.
		\item In the second case, the object stored in \texttt{mean} is return, i.e. the function object.
	\end{itemize}

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Function Basics -- Functions as Objects}

	<<function_3>>=
	a <- mean(x = c(1, 2, 3, 4, 5))
	b <- mean
	@
	
	What do the variables \texttt{a} and \texttt{b} hold?

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Function Basics -- Functions as Objects}

	<<function_4>>=
	a
	b
	@
	
	\texttt{a} holds the result of the function call whereas \texttt{b} holds the function object. Thus, \texttt{b} is now a different name for the same function object that is stored in \texttt{mean}.

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Function Basics -- Functions as Objects}

	The proof\dots

	<<function_5>>=
	b(c(1, 2, 3, 4, 5))
	@

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Function Basics -- Arguments}

	\texttt{x} is one argument of \texttt{mean} but not the only one.

	<<function_6>>=
	a <- c(6, 6, 5, 7, 9, 1, 3, NA, 2, 3, NA)
	mean(x = a, trim = 0.1, na.rm = TRUE)
	@
	
	If \texttt{na.rm} is set to \texttt{TRUE} all missing values will be removed before the mean is calculated. \texttt{trim} is the fraction of values removed from either end of the vector.

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Function Basics -- Arguments}

	It is not necessary to always write the name of all arguments.
	
	<<function_7>>=
	mean(c(6, 6, 5, 7, 9, 1, 3, NA, 2, 3, NA), 0.1, TRUE)
	@
	
	The parameters are matched by position to each argument. It is convenient to not name the first one or two arguments (those that are known anways). However, leaving away the name of each argument soon becomes confusing.

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Function Basics -- Arguments}

	Positional matching only works if you hand over a parameter for each argument. If you want to hand over the third argument by position you also have to hand over the first and second argument. Thus, the following does not work.
	
	<<function_8>>=
	mean(c(6, 6, 5, 7, 9, 1, 3, NA, 2, 3, NA), TRUE)
	@
	
	In this case, the argument \texttt{trim} takes the parameter \texttt{TRUE}, which doesn't make sense.

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Function Basics -- Return Values}

	For the case of \texttt{mean} the return value is obviously a numeric vector of length \texttt{1}. This return value could be assigned to a variable as we have seen. Sometimes, it seems as if there is no return value.
	
	<<function_9, fig.height=3, fig.width=4, out.height="1.5in", out.width="2in">>=
	a <- plot(1:10)
	@
	
	The graphic produced is not the return value of \texttt{plot}. Otherwise, we would not see the graphic when we assign the result to a variable (it is a so called side effect of the function). But what is the return value then?

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Function Basics -- Return Values}
	
	<<function_10>>=
	a
	@
	
	The return value is \texttt{NULL} which is a very special object that represents a non-existing value. Do not confuse this with a missing value \texttt{NA}. Missing values are existent. We just don't know it. \texttt{NULL} objects do not exist. There is no storage space reserved for a variable holding \texttt{NULL} and thus there is no address for \texttt{NULL}.

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Function Basics -- Infix Functions}

	We have learned above that a function is called by preceding the function name with parantheses. So what about the assignment operator or math operators?
	
	<<function_11>>=
	a <- c(1, 2, 3)
	a + 2
	@
	
	These are special functions called infix function (as they are in between their arguments) in comparison to prefix functions.

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Function Basics -- Infix Functions}

	Every infix function is also a prefix function and can be called as such using backticks.
	
	<<function_12>>=
	`<-`(b, c(9, 8, 7))
	b
	`+`(b, 4)
	@
	
	Infix functions written by third parties are enclosed by \texttt{\%} (as you may know from the magrittr package: \texttt{\%>\%}). Only the R Core Team is able to create infix functions without \texttt{\%}.

\end{frame}


% =============================================================================



% *****************************************************************************
% Getting Help
% *****************************************************************************

\section{Getting Help}
% *****************************************************************************

\begin{frame}[fragile]{Getting Help}

	Even in base R are hundreds of functions. Obviously, we can not remember each function and what arguments they have. So how could we get informations about functions?


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Getting Help}

	Some general tipps and tricks.
	
	\begin{itemize}[<+- | alert@+>]
		\item The functions usually have common names like \texttt{mean}, \texttt{median}, \texttt{strsplit}, etc.
		\item Functions usually take arguments in the order you would expect them.
		\item Arguments that actually do the same in different functions have the same name. For instance, \texttt{mean}, \texttt{median}, \texttt{var} all have an argument \texttt{na.rm} that removes any missing values prior to any calculations.
		\item If you use an IDE you usually only need to remember the first letters as the IDE will auto-complete your input.
		\item Google is a very good source for help but be cautious. Not every answer you find on the internet is a good one (even though it technically works).
		\item You always can use the internal help system of R.
	\end{itemize}


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Getting Help}

	For getting help in R to a certain function, type \texttt{?} followed by the name of the function.
	
	<<help_1, eval=FALSE>>=
	?mean
	@
	
	If you are using pure R, i.e. not an IDE, your default web browser will open with the help site to this function (it is an HTML file on your computer so you can use the help system even without internet).
	
	If you are using RStudio, the help site is opened in RStudio instead.


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Getting Help}

	The help site always has the same structure.
	
	\begin{itemize}[<+- | alert@+>]
		\item First comes a header with a brief description what the functions does.
		\item \emph{(Usage)}~~How do you call the function. Here you also see the default values for arguments.
		\item \emph{(Arguments)}~~A description about each argument, i.e. what values does an argument take and what does it do.
		\item \emph{(Details)}~~A more detailed description of what the function does, sometimes how it does it, and more detailed explanations about the argument if necessary.
		\item \emph{(Value)}~~The return value of the functions. This is very important cause often you will use the return value of one function as input for another function. This way you can make sure that both have the same structure.
		\item References and related functions.
		\item \emph{(Examples)}~~Some use cases and examples.
	\end{itemize}


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Getting Help}

	As you are becoming a better programmer this help system often is everything you need.


\end{frame}


% =============================================================================



\end{document}