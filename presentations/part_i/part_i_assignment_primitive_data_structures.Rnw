\documentclass[9pt, aspectratio=169]{beamer}\usepackage{knitr}

\usetheme[progressbar=frametitle]{metropolis}
\usepackage{appendixnumberbeamer}

\usepackage{booktabs}
\usepackage[scale=2]{ccicons}

\usepackage{xspace}
\newcommand{\themename}{\textbf{\textsc{metropolis}}\xspace}

\usepackage[utf8]{inputenc}				% Unicode transformation format für Input
\usepackage[T1]{fontenc}				% Zeichensatzkodierung
\usepackage{lmodern}
\usepackage{upgreek}					% Providing non-emphasized greek letters
\usepackage{textcomp}					% Providing special characters 
%\usepackage[english]{babel}				% Setting 'english' as the documents language
\usepackage{csquotes}

\usepackage{ulem}

\usepackage{fontspec}
\usepackage{fontawesome}

\metroset{block=fill}

\usepackage{dirtree}

\title{Data Science with R}
\subtitle{Part I: Assignments and Primitive Data Structures}
% \date{\today}
\date{}
\author{Raphael Schleutker}
\institute{\textit{It’s not at all important to get it right the first time. It’s vitally important to get it right the last time.}
\hfill --- Andrew Hunt and David Thomas}
% \titlegraphic{\hfill\includegraphics[height=1.5cm]{logo.pdf}}

\usepackage{hyperref}

\begin{document}

%!Rnw weave = knitr
%\SweaveOpts{concordance=TRUE}

<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
options(formatR.arrow = TRUE, width = 50, scipen=999)
opts_chunk$set(echo = TRUE,
               message = FALSE,
               warning = FALSE,
               fig.path = 'figures/graphics-',
               cache.path = 'cache/graphics-',
               fig.align = 'center',
               dev = 'pdf',
               fig.show = 'hold',
               par = FALSE,
               cache = FALSE,
               size = 'footnotesize',
               comment = '#')

opts_knit$set(self.contained=FALSE, global.par = TRUE)

Sys.setenv(LANG = "en")
@

<<include=FALSE>>=
orig_pars <- par(no.readonly = TRUE)
@



% *****************************************************************************
% TITLEPAGE
% *****************************************************************************

\maketitle

\begin{frame}{Table of contents}
  \setbeamertemplate{section in toc}[sections numbered]
  \tableofcontents[hideallsubsections]
\end{frame}



% *****************************************************************************
% R as a Calculator
% *****************************************************************************

\section{R as a Calculator}
% *****************************************************************************

\begin{frame}[fragile]{R as a Calculator}

	In the simplest case, R can be used just as a calculator.
	
	<<calculator_1>>=
	1 + 1
	5 - 1
	3 * 4
	6/2
	@

\end{frame}


% =============================================================================


\begin{frame}[fragile]{R as a Calculator}

	R knows most common math operations.
	
	<<calculator_2>>=
	2**5
	2^5
	@
	
	Does R also know rules like multiplication and division first, then addition and subtraction? \textbf{Try it!}
	
	<<calculator_2_1, eval=FALSE>>=
	2 + 3 * 5
	@

\end{frame}


% =============================================================================


\begin{frame}[fragile]{R as a Calculator}

	We can use parantheses to define the precedence of operations.
	
	<<calculator_3>>=
	2 + 3 * 5
	(2 + 3) * 5
	@

\end{frame}


% =============================================================================


\begin{frame}[fragile]{R as a Calculator}

	R even knows some constants like $\pi$.
	
	<<calculator_4>>=
	pi
	@
	
	Other numbers like $e$ can be produced as the result of a function call (we will come to that later).
	
	<<calculator_5>>=
	exp(1)	# exp(1) = e^1 = e
	@

\end{frame}


% =============================================================================


\begin{frame}[fragile]{R as a Calculator}

	R also knows a lot of functions for everyday math.
	
	<<calculator_6>>=
	sin(pi)
	cos(pi)
	tan(pi)
	@

\end{frame}


% =============================================================================


\begin{frame}[fragile]{R as a Calculator}

	What about some experiments?
	
	<<calculator_7>>=
	1 / 0
	0 / 0
	1 / Inf
	@

\end{frame}


% =============================================================================


\begin{frame}[fragile]{R as a Calculator -- Summary}
	
	{\center
	
	\begin{tabular}{ll}
	\toprule
	Meaning		&	Operator			\\
	\midrule
	Basic operators				&	\texttt{+, -, *, /, \textasciicircum, **}		\\
	Integer division, modulo	&	\texttt{\%/\%, \%\%}	\\
	Extreme values				&	\texttt{min(), max()}	\\
	Absolute value				&	\texttt{abs()}	\\
	Square root					&	\texttt{sqrt()}	\\
	Rounding					&	\texttt{round(), floor(), ceiling()}	\\
	Logarithm					&	\texttt{log(), log10(), log2(), exp()}	\\
	Sum, Product				&	\texttt{sum(), prod()}	\\
	\bottomrule
	\end{tabular}
	}
		
	
	\pause
	
	R does'nt provide functions for everything. Sometimes, you need a basic mathematical knowledge to get the desired result, e.g. $\sqrt[3]{8} = 8^{\frac{1}{3}}$:
	
	<<calculator_8>>=
	8^(1/3)
	@

\end{frame}


% =============================================================================



% *****************************************************************************
% Assignments in R
% *****************************************************************************

\section{Assignments in R}
% *****************************************************************************

\begin{frame}[fragile]{Assignments in R}

	What, if we want to store the result of a calculation for later use? We can create a variable and store the information on the computer. The variable is then the name for the computer to look up for the correct information.
	
	<<assignment_1>>=
	a <- 4
	a
	@
	
	\begin{block}{The assignment operator in R}
	When coming from other programming languages you might use the equal sign = to create variables. Eventhough it is possible to use this assignment operator in R (and you sometimes see other people using it) it is everything but advisible! The reason is beyond our scope for now. So always stick with \texttt{<-}.	
	\end{block}

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Assignments in R}

	We can now use this stored value for further calculations:
	
	<<assignment_2>>=
	a + 3
	a * a
	b <- 3 * a
	b
	@
	

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Assignments in R}

	We will learn later that everything that does something in R is a function and that every function has a return value. We can conclude from this that \texttt{<-} is a function (as it does something) and therefor it has to return something (as it is a function). Indeed it returns the right-hand value, which could be used for just another assignment:
	
	<<assignment_3>>=
	d <- c <- 5
	c
	d
	@
	
	First \texttt{5} is assigned to the variable \texttt{c}. This returns the value \texttt{5} again (we could imagine that \texttt{c <- 5} is replaced by \texttt{5}) and consequentially \texttt{5} is assigned to the variable \texttt{d} as well.

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Assignments in R}

	There is another assignment operator \texttt{->} and it should not be hard to determine what it does in contrast to \texttt{<-}.
	
	<<assignment_4>>=
	5 -> e
	e
	@
	
	Please avoid this! It's confusing and I am not aware of any particulary useful application of \texttt{->}.

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Assignments in R}

	Values stored in variables are not persistent! If you close R and re-open it, all the created variables are gone.
	
	Why is that? When a program needs storage space it asks the operating system (Windows, iOS, Linux, \dots ) for space. The OS grants some space and the software can do what it want with it, for instance storing a value there. The name of the variable is then a name that the software uses to look up the address on the hard drive. If the software is closed, all the granted storage space goes back to the OS. The value is still stored on the hard drive but as soon as the OS needs the space for something else, it will overwrite the value. Additionally, you can not reconstruct the address of the value when you re-start the software in the future.

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Assignments in R}

	The practical consequence from this is that you have to write your code in a way so that you just have to re-run the script and everything is as before. This is not always possible. Sometimes, running a script takes a lot of time. In that case, we can store a persistent copy of the result as a file on the computer.

\end{frame}


% =============================================================================



% *****************************************************************************
% Primitive Data Structures
% *****************************************************************************

\section{Primitive Data Structures}
% *****************************************************************************

\begin{frame}[fragile]{Primitive Data Structures}

	Key for successfull programming is understanding the data structures. There are dozens of different data structures in different programming languages. In R, fortunately, we are mainly dealing with 2 data structures: vectors and lists (well and some structures building on top of them \dots ). Vectors are the most primitive ones. They are just series of values, separated by a comma.
	
	<<prim_data_struct_1>>=
	c(1, 2, 3, 4, 5)
	@
	
	Here, we call the function \texttt{c()} (short for combine) to create a vector.

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Primitive Data Structures}

	Of course, we can assign vectors to variable names as well.
	
	<<prim_data_struct_2>>=
	x <- c(1, 2, 3, 4, 5)
	x
	@
	
	Indeed, R created vectors automatically before, when we entered only one value (a vector of length 1).

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Primitive Data Structures}

	Vectors can have different types to store different kinds of information.
	
	<<prim_data_struct_3>>=
	v <- c(TRUE, TRUE, FALSE)	# Logical values
	x <- c(1, 2, 3, 4, 5)		# Numeric values
	y <- c("a", "b", "c")		# Characters.
	z <- c(1+2i, 3-4i)		# Complex values.
	@

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Primitive Data Structures}
	
	<<prim_data_struct_4>>=
	v
	x
	y
	z
	@

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Primitive Data Structures}

	If we don't know the type of value a variable holds, we can ask for it.
	
	<<prim_data_struct_5>>=
	typeof(v)
	typeof(x)
	typeof(y)
	typeof(z)
	@

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Primitive Data Structures}

	\begin{block}{The type of a vector}
	One vector can only have one type. There is no exception to this rule. If you try to create a vector with different types, R will automatically coerce all values to the most general type.
	\end{block}
	
	<<prim_data_struct_6>>=
	t <- c(1, "a", TRUE, 6-3i)
	t
	@
	
	All values were coerced to characters.

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Primitive Data Structures -- Logical Values}

	Logical values can have two different values: \texttt{TRUE} or \texttt{FALSE}. They are usually the result of comparisons:
	
	<<logical_1>>=
	4 == 3
	"A" == "A"
	@

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Primitive Data Structures -- Logical Values}

	Logical values are very useful for control structures later. They allow us to do different things for different data.
	
	<<logical_2>>=
	a <- 58	# The result of a calculation that we don't know in advance.
	
	if(a == 58) {
		b <- 4
	} else {
		b <- 10
	}
	
	b
	@

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Primitive Data Structures -- Logical Values}

	Logical values can be used in math operations. In this case \texttt{TRUE} stands for \texttt{1} while \texttt{FALSE} stands for \texttt{0}.
	
	<<logical_3>>=
	TRUE + TRUE
	FALSE * 40
	@

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Primitive Data Structures -- Numeric Values}

	R knows different kinds of numeric values.
	
	\begin{itemize}
		\item \emph{Integer} are self-explanatory. They are created by tailoring values with an \texttt{L}.
		\item \emph{Doubles} are decimal numbers. Double refers to the precision with which a value is stored (double usually means 64bit).
	\end{itemize}
	
	<<numeric_1>>=
	1L
	1
	@

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Primitive Data Structures -- Characters}

	Characters are used to store textual information. Several characters are called a string.
	
	<<character_1>>=
	a <- "Hello World"
	@
	
	Characters are not numeric, even if they consist of digit characters only.
	
	<<character_2>>=
	"1" + "2"
	@

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Primitive Data Structures -- Characters}

	Of course, R has some useful functions to work with textual information.
	
	<<character_3>>=
	paste("1", "2")
	strsplit("Hello world!", split = " ")
	@
	
	We will see later how to work with strings and how we can use a combination of numeric values and strings to represent categorical data.

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Primitive Data Structures -- Complex Values}

	Forget it. You will never use it. Never\dots

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Primitive Data Structures -- How to work with Vectors}

	At the beginning, it's hard to get your head around vectors but they turn out to be quite handy.
	
	<<vectors_1>>=
	a <- c( 1, 2, 3, 4, 5)
	a + 1
	a + c(1, 2)
	@
	
	The operation happens \emph{elementwise} and shorter vectors are \emph{recycled}.

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Primitive Data Structures -- How to work with Vectors}

	Many functions expect vectors.
	
	<<vectors_2>>=
	sum(a)
	prod(a)
	@

\end{frame}


% =============================================================================


\begin{frame}[fragile]{Primitive Data Structures -- How to work with Vectors}

	There are some useful functions that create vectors.
	
	<<vectors_3>>=
	1:10
	seq(1, 20, 2)
	rep(c(1, 2), each = 2)
	@
	
	This way, you can create virtually all patterns. And sometimes, you need them\dots

\end{frame}


% =============================================================================


\end{document}