\documentclass[10pt]{beamer}

\usetheme[progressbar=frametitle]{metropolis}
\usepackage{appendixnumberbeamer}

\usepackage{booktabs}
\usepackage[scale=2]{ccicons}

\usepackage{xspace}
\newcommand{\themename}{\textbf{\textsc{metropolis}}\xspace}

\usepackage[utf8]{inputenc}				% Unicode transformation format f√ºr Input
\usepackage[T1]{fontenc}				% Zeichensatzkodierung
\usepackage{lmodern}
\usepackage{upgreek}					% Providing non-emphasized greek letters
\usepackage{textcomp}					% Providing special characters 
%\usepackage[english]{babel}				% Setting 'english' as the documents language
\usepackage{csquotes}

\usepackage{ulem}

\usepackage{fontspec}
\usepackage{fontawesome}

\metroset{block=fill}

\usepackage{dirtree}

\title{Data Science with R}
\subtitle{Part V: Subsetting and Positioning}
% \date{\today}
\date{March 20, 2020}
\author{Raphael Schleutker}
\institute{\textit{Walking on water and developing software from a specification are easy if both are frozen.\\}
\hfill --- Edward V. Berard}
% \titlegraphic{\hfill\includegraphics[height=1.5cm]{logo.pdf}}

\usepackage{hyperref}

\begin{document}

%!Rnw weave = knitr
%\SweaveOpts{concordance=TRUE}

<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
options(formatR.arrow = TRUE, width = 50, scipen=999)
opts_chunk$set(echo = TRUE,
               message = FALSE,
               warning = FALSE,
               fig.path = 'figures/graphics-',
               cache.path = 'cache/graphics-',
               fig.align = 'center',
               dev = 'pdf',
               fig.show = 'hold',
               par = FALSE,
               cache = FALSE,
               size = 'small',
               comment = '#')

opts_knit$set(self.contained=FALSE)

knit_hooks$set(par = function(before, options, envir) {
  if (before && options$fig.show!='none') {
    par(mar = c(4,4,.1,.1),
        cex.lab = .95,
        cex.axis = .9,
        mgp = c(2,.7,0),
        tcl = -.3)
  }
}, crop=hook_pdfcrop)

Sys.setenv(LANG = "en")
@

<<figure_settings, echo=FALSE>>=

@



% *****************************************************************************
% TITLEPAGE
% *****************************************************************************

\maketitle

\begin{frame}{Table of contents}
  \setbeamertemplate{section in toc}[sections numbered]
  \tableofcontents[hideallsubsections]
\end{frame}



% *****************************************************************************
% A primer on logical values
% *****************************************************************************

\section{A primer on logical values}
% *****************************************************************************


\begin{frame}[fragile]{A primer on logical values}

	Logical values appear very simple since they only take one of two possible values. But this simplicity constitute the beauty of logical values.
	
	<<>>=
	x <- sample(14)
	x
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{A primer on logical values}

	Usually, logical vectors are created by comparison.
	
	<<>>=
	x < 10
	x <= 10
	x == 10
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{A primer on logical values}
	
	<<>>=
	x != 10
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{A primer on logical values}

	We can invert logical values by using \texttt{!}. It is called negation operator.
	
	<<>>=
	x != 10
	!(x == 10)	# The same as above.
	@
	
	As for mathematical operators we can use parentheses to define the precedence of operators.


\end{frame}


% =============================================================================


\begin{frame}[fragile]{A primer on logical values}

	We can always identify pairs of opposed operators.
	
	<<>>=
	x <= 10
	!(x > 10)
	@
	
	Both are completely equivalent.


\end{frame}


% =============================================================================


\begin{frame}[fragile]{A primer on logical values}

	Sometimes, we want to check if the elements of one vector are among the elements in another vector. We can use \texttt{\%in\%} for this.
	
	<<>>=
	x %in% c(1,4,17)
	@
	
	For each element in \texttt{x} \texttt{TRUE} is returned if it is equal to any element of the right-hand vector.


\end{frame}


% =============================================================================


\begin{frame}[fragile]{A primer on logical values}

	Comparisons are one kind of logical operators. The other kind are connective operators. They take two logical values and return a logical value.
	
	<<>>=
	y <- x < 10
	z <- x > 10
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{A primer on logical values}
	
	<<>>=
	y & z	# Intersection, conjunction
	y | z	# Union, disjunction
	@
	
	Working with logical values is closely related to set theory and there are some mathematical rules that can be applied. However, a basic and intuitive understanding is usually all we need.


\end{frame}


% =============================================================================


\begin{frame}[fragile]{A primer on logical values}
	
	<<>>=
	y & z	# Intersection, conjunction
	y | z	# Union, disjunction
	@
	
	Working with logical values is closely related to set theory and there are some mathematical rules that can be applied. However, a basic and intuitive understanding is usually all we need.


\end{frame}


% =============================================================================


\begin{frame}[fragile]{A primer on logical values}

	Remember the \texttt{\%in\%} operator? We can express the very same with unions:
	
	<<>>=
	x %in% c(1,4,17)
	x == 1 | x == 4 | x == 17 # Less convenient but equivalent.
	@


\end{frame}


% =============================================================================



% *****************************************************************************
% Vectors
% *****************************************************************************

\section{Vectors}
% *****************************************************************************



\begin{frame}[fragile]{Vectors}

	We have seen so far how we can use vectors and lists/data frame to store our information and we have seen how we can get back the stored information by calling the variable name. Often, we only want specific values of a vector or list.
	
	We can extract specific values by different methods:
	
	\begin{itemize}
		\item By its position in the vector.
		\item By its name.
		\item By its value.
	\end{itemize}
	
	Let's create a vector with shuffled values from 1 to 100.	
	
	<<>>=
	a <- sample(100)
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Vectors -- Subsetting by position}

	Vectors are ordered, meaning that the first element always stays the first element as long as we do not change this actively. So we can refer to an element in a vector by its position. For this, we use the \texttt{[} operator (which is also a function: It does something!).
	
	<<>>=
	a[3]
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Vectors -- Subsetting by position}

	We know that single values are also vectors (of length one). So we could try to use vectors of longer length.
	
	<<>>=
	a[c(3,6,7)]
	@
	
	Apparently, we can also use vectors of arbitrary length. We can even use values that exceed the length of the vector.
	
	<<>>=
	a[101]
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Vectors -- Subsetting by position}

	We can also extract values several times from a vector.
	
	<<>>=
	a[c(3,3,4,4)]
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Vectors -- Subsetting by position}

	We have seen how we can can create special patterns of values using \texttt{seq} and \texttt{rep}. This comes in handy for subsetting by position. For instance, if we want to extract every second element.
	
	<<>>=
	seq(1, length(a), 2)
	a[seq(1, length(a), 2)]
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Vectors -- Subsetting by position}

	Sometimes we want to get all values except some specific one. In this case we can use negative values.
	
	<<>>=
	-seq(1, length(a), 5)
	a[-seq(1, length(a), 5)]
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Vectors -- Subsetting by name}

	As for lists and data frame we can give elements of vectors names. We can do so either directly when we create the vector or we do it later by using \texttt{names}
	
	<<>>=
	c(a = 1, b = 2, c = 3)
	
	b <- 1:26
	names(b) <- letters
	b
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Vectors -- Subsetting by name}

	Of course we can still use subsetting by position for named vectors.
	
	<<>>=
	b[1:10]
	@
	
	But now we can also refer to elements by their names. Instead of a number we add a character string with the name.
	
	<<>>=
	b["d"]
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Vectors -- Subsetting by name}

	Of course we can use vectors with several names.
	
	<<>>=
	b[c("a", "a", "b", "c")]
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Vectors -- Double brackets for vectors}

	For subsetting by position and name we can either use single brackets as shown so far, or double brackets \texttt{[[}. Double brackets only take a \emph{single} value and accordingly we can only extract a single value at a time. The main difference for vectors is, that double brackets drop the name of the element.
	
	<<>>=
	b[1]
	b[[1]]
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Vectors -- Logical subsetting}

	The third way to extract specific values is logical subsetting or subsetting by value. We can state for each position if we want to extract it.
	
	<<>>=
	c <- 1:5
	c[c(TRUE, TRUE, FALSE, FALSE, TRUE)]
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Vectors -- Logical subsetting}

	Logical vectors that are shorter than the vector from which we want to extract values will be recycled. So, another way to extract every second element is
	
	<<>>=
	a[c(TRUE, FALSE)]
	@
	
	A general rule in programming is that a goal can be achieved in several ways. Some ways are obviously more elegant than others but often, it is simply a matter of taste.
	
	(I, personally, like the above solution :) )


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Vectors -- Logical subsetting}

	Comparisons create logical vectors. We can utilize this to extract elements according to their value.
	
	<<>>=
	d <- a < 25
	head(d)
	length(d)
	
	a[d]
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Vectors -- Logical subsetting}

	Usually, we do not store the logical vector in a variable but use it directly.
	
	<<>>=
	a[a < 25]
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Vectors -- Logical subsetting}

	Sometimes we are not interested in the value for which a comparisons is \texttt{TRUE} but in its position in the vector. We can use \texttt{which} for this. This function takes a logical vector and returns all positions of \texttt{TRUE}.
	
	<<>>=
	which(a < 25)
	@
	
	A common case is to find the position of the smallest or largest value in a vector. For this, we can use \texttt{which.min} and \texttt{which.max}.
	
	<<>>=
	which.min(a)
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Vectors -- Logical subsetting}

	If we want to find the position of several values in a vector, we can use \texttt{match}.
	
	<<>>=
	match(1:10, a)
	@
	
	For each element in the first element, \texttt{match} returns the position of the \emph{first} appearance of that value in the second vector.


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Vectors -- Modifying vectors}

	Interestingly, we can use all of the above methods not only to extract values but also to modify them.
	
	<<>>=
	a[a < 25] <- 0
	a
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Vectors -- Modifying vectors}

	This can be, for instance, used to re-order a vector.
	
	<<>>=
	e <- c(2, 5, 3, 8, 9, 1)
	e[c(2,3)] <- e[c(3,2)]	# Switch 2nd and 3rd element.
	e
	@


\end{frame}


% =============================================================================



% *****************************************************************************
% Lists
% *****************************************************************************

\section{Lists}
% *****************************************************************************


\begin{frame}[fragile]{Lists}

	We can use the very same mechanisms to extract elements from lists.
	
	<<>>=
	l1 <- list(a = 1:10, b = list(100:90, letters[1:10]), c = mean)
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Lists}
	
	<<>>=
	l1[1]
	l1["a"]
	l1[c(TRUE, FALSE, FALSE)]	
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Lists -- Single and double brackets}

	For lists, single brackets always return a list, also for single elements.
	
	<<>>=
	typeof(l1[1])
	@
	
	Double brackets return the actual element that is stored at the position without an enclosing list.
	
	<<>>=
	typeof(l1[[1]])
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Lists -- Single and double brackets}
	
	<<>>=
	l1[1]
	l1[[1]]
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Lists -- Subsetting by name}

	In case of named lists, we have an additional way to retrieve an element by name, i.e. by using the \texttt{\$} operator.
	
	<<>>=
	l1$a
	l1[["a"]]
	@
	
	Both are completely equivalent. Using brackets however allows us to retrieve elements with computed values whereas for \texttt{\$} we always have to hard-code the name ourselves.


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Lists -- Recursive subsetting}

	\texttt{[[} returns the element at a specific position. If this is another list or a vector we can directly subset the result again.
	
	<<>>=
	l1[[2]]
	l1[[2]][[1]]
	l1[[2]][[1]][5]
	@


\end{frame}


% =============================================================================



% *****************************************************************************
% Data frames
% *****************************************************************************

\section{Data frames}
% *****************************************************************************



\begin{frame}[fragile]{Data frames}

	We have seen that data frames are a special kind of list that are used to store tabular data. Therefore, we can use the very same techniques to retrieve elements from data frames as for lists. But data frames allow us to subset data in a more convenient way. Let's take the \texttt{iris} dataset as an example.
	
	<<size='footnotesize'>>=
	head(iris)
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Data frames}

	An element in a table is defined by its row and column. Accordingly, we can retrieve a value by providing both values.
	
	<<>>=
	iris[1, 2]
	@
	
	This returns the element in the first row and second column. Please notice, that we provide two arguments here, not one argument with two elements!


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Data frames}

	Leaving away one value returns all values for that dimension.
	
	<<>>=
	iris[1,]	# First row.
	iris[,1]	# First column.
	@


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Data frames}

	Of course, we can also use more than one value for each dimension.
	
	<<>>=
	iris[c(2,3), c(4,5)]
	@
	
	There is no way to retrieve several single elements. So we can not get the element in the second row and fourth column and the element in the third row and fifth column in the same call.


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Data frames -- Logical subsetting}

	Logical subsetting is also possible for data frames but usually a bit inconvenient.
	
	<<>>=
	iris[iris$Sepal.Length > 4.5,]
	@
	
	We have to use the whole name of the data frame as well as the column name.


\end{frame}


% =============================================================================


\begin{frame}[fragile]{Data frames -- subset}

	A useful function for data frames is \texttt{subset}. As the name suggests, it returns a subset of the data frame.
	
	<<>>=
	subset(iris, Sepal.Length > 4.5, select = Petal.Length)
	@
	
	There is no way to retrieve several single elements. So we can not get the element in the second row and fourth column and the element in the third row and fifth column in the same call.


\end{frame}


% =============================================================================



\end{document}